install.packages("quantstrat")
library("quantstrat")
setwd("~/algo_trading")
R.version()
R.Version()
install.packages("quantmod")
install.packages("quantstrat")
.libPaths()
library(quantstrat)
library(quantmod)
install.packages("blotter")
install.packages("quantstrat", repos="http://R-Forge.R-project.org")
install.packages("blotter", repos="http://R-Forge.R-project.org")
install.packages("RTAQ", repos="http://R-Forge.R-project.org")
install.packages("FinancialInstrument", repos="http://R-Forge.R-project.org")
?getSymbols
source('~/algo_trading/pull_in_data.R', echo=TRUE)
getSymbols("SPY", from ="2015-01-01", to ="2016-12-31", src="yahoo", adjust=TRUE)
plot(Cl("SPY"))
getSymbols("SPY", from ="2015-01-01", to ="2016-12-25", src="yahoo", adjust=TRUE)
plot(Cl(SPY))
lines(SMA(Cl(SPY)), col="red")
source('~/algo_trading/configuration.R', echo=TRUE)
source('~/algo_trading/configuration.R', echo=TRUE)
source('~/algo_trading/configuration.R', echo=TRUE)
source('~/algo_trading/indicators.R', echo=TRUE)
spy_rsi = RSI(price = Cl(SPY), n = 3)
#CREATE A 200 DAY MOVING AVERAGE
spy_sma = SMA(x= Cl(SPY), n = 200)
# CREATE AN RSI WITH A THREE DAY LOOKBCAK PERIOD. RSI IS THE RELATIVE STRENGTH INDEX. FORMULA THAT EXPRESSES THE FRACTION OF GAINS AND LOSSES OVER THE PAST LOOKBACK PERIODS
#100-(100/(1+RS)) WHERE RS IS THE AVERAGE GAIN OVER THE AVERAGE LOSS OVER THE LOOKBACK WINDOW DECIDED
spy_rsi = RSI(price = Cl(SPY), n = 3)
source('~/algo_trading/configuration.R', echo=TRUE)
source('~/algo_trading/indicators.R', echo=TRUE)
plot(Cl(SPY))
lines(spy_sma, col = "red")
lines(spy_rsi, col = "blue")
lines(spy_sma, col = "red")
lines(spy_rsi, col = "blue")
plot(Cl(SPY))
lines(spy_rsi, col = "blue")
lines(spy_rsi, col = "red")
spy_rsi = RSI(x = Cl(SPY), n = 3)
plot(Cl(SPY))
lines(spy_sma, col = "red")
lines(spy_rsi, col = "red")
spy_rsi = RSI(price = Cl(SPY), n = 3)
lines(spy_rsi, col = "red")
plot(spy_rsi, col = "red")
?quoate
?quote
quote(5)
quote(Cl(SPY))
add.indicator(strategy = strategy.st,
#ADD THE SMA FUNCTION
name = SMA,
#ASKS FOR THE ARGUMENTS TO THE NAME FUNCTION. MKTDATA IS USED BC THE DATA WILL CHANGE DEPENDING ON WHAT INSTRUMENT IS USED AT THE TIME AND QUOTE ALLOWS THE DATA TO CHANGE OVER TIME???
arguments = list(x = quote(Cl(mktdata)), n = 200),
#LABEL YOUR INDICATOR
label = "SMA200"
)
add.indicator(strategy = strategy.st,
#ADD THE SMA FUNCTION
name = SMA,
#ASKS FOR THE ARGUMENTS TO THE NAME FUNCTION. MKTDATA IS USED BC THE DATA WILL CHANGE DEPENDING ON WHAT INSTRUMENT IS USED AT THE TIME AND QUOTE ALLOWS THE DATA TO CHANGE OVER TIME???
arguments = list(x = quote(Cl(mktdata)), n = 50),
#LABEL YOUR INDICATOR
label = "SMA50"
)
#ADD AN RSI INDICATOR TO YOUR STRATEGY
add.indicator(strategy = strategy.st,
name = "RSI",
arguments = list(price = quote(Cl(mktdata)),n = 3),
label = "RSI_3"
)
#ADD AN RSI INDICATOR TO YOUR STRATEGY
add.indicator(strategy = strategy.st,
name = "RSI",
arguments = list(price = quote(Cl(mktdata)),n = 3),
label = "RSI_3"
)
#CODE MY OWN IDICATOR
RSI_avg = function(price, n1, n2){
rsi_1 = RSI(price = price, n = n1)
rsi_2 = RSI(price = price, n = n2)
RSI_avg = (rsi_1 + rsi_2)/2
colnames(RSI_avg) = "RSI_avg"
return(RSI_avg)
}
add.indicator(strategy.st, name = "RSI_avg", arguments = list(price=quote(Cl(mktdata)), n1 = 3, n2 = 4), label = "RSI_3_4")
#CODE OWN INDICATOR 2
#DAVID VARADI INDICATOR
DVO = function(HLC, navg = 2, percentlookback = 126){
ratio = Cl(HLC)/((Hi(HLC) +Lo(HLC))/2)
#SMOOTH OUTPUTS USING MOVING AVERAGE
avgratio = SMA(ratio, n = navg)
out = runPercentRank(avgratio, n = percentlookback, exact.multiplier = 1)*100
colnames(out)= "DVO"
return(out)
}
add.indicator(strategy = strategy.st, name = "DVO", arguments = list(HLC = quote(HLC(mktdata)),navg = 2, percentlookback = 126),label = "DVO_2_126")
test = applyIndicators(strategy = strategy.st, mktdata = OHLC(SPY))
test
head(test)
test_subset = test["2013-09-01/2013-09-30"]
test_subset
source('~/algo_trading/configuration.R', echo=TRUE)
source('~/algo_trading/indicators.R', echo=TRUE)
source('~/algo_trading/indicators.R', echo=TRUE)
test_subset
head(test)
test_subset = test["2013-09-01/2013-09-05"]
head(test)
test_subset
source('~/algo_trading/configuration.R', echo=TRUE)
source('~/algo_trading/configuration.R', echo=TRUE)
source('~/algo_trading/indicators.R', echo=TRUE)
test_subset
source('~/algo_trading/signals.R', echo=TRUE)
add.signal(strategy.st, name ="sigCrossover",
arguments = list(columns = c ("SMA50", "SMA200"), relationship = "lt"),
label = "filterexit"
)
#SPECIFIES DVO_2_126 MUST BE LESS THAN 20. if dvo_2_126 is lover than 20 it will return true.
add.signal(strategy.st, name = 'signThreshold',
arguments = list(column= "DVO_2_126",
threshold = 20,
relationship = "lt",
cross = FALSE
),
label = "longthreshold"
)
add.signal(strategy.st, name = "sigThreshold",
arguments = list(column="DVO_2_126",
threshold = 80,
relationship = "gt",
#INTERESTED ONLY WHEN THERE IS A CROSSOVER
cross = TRUE
),
label = "thresholdexit"
)
test_init = applyIndicators(strategy.st, mktdata = OHLC(SPY))
test applySignals(strategy = strategy.st, mktdata = test_init)
test = applySignals(strategy = strategy.st, mktdata = test_init)
#SMA50 MUST BE GREATER THAN SMA200
add.signal(strategy.st, name = "sigComparison",
arguments = list(columns = c("SMA50", "SMA200"),relationship = "gt"),
label = "longfilter")
#SPECIFIES WHEN SMA50 CROSSES OVER SMA200
add.signal(strategy.st, name ="sigCrossover",
arguments = list(columns = c ("SMA50", "SMA200"), relationship = "lt"),
label = "filterexit"
)
#SPECIFIES DVO_2_126 MUST BE LESS THAN 20. if dvo_2_126 is lover than 20 it will return true.
#ONE OF TWO SWITCHES THAT NEED TO BE ON IN ORDER TO ENTER INTO A LONG POSITION IN THIS STRATEGY
add.signal(strategy.st, name = 'sigThreshold',
arguments = list(column= "DVO_2_126",
threshold = 20,
relationship = "lt",
#INTERESTED IN EVERY INSTANCE THAT THE OSCILLATOR IS LESS THAN 20 NOT JUST WHEN IT CROSSES OVER
cross = FALSE
),
label = "longthreshold"
)
#SIGNAL TO EXIT A STRATEGY
add.signal(strategy.st, name = "sigThreshold",
arguments = list(column="DVO_2_126",
threshold = 80,
relationship = "gt",
#INTERESTED ONLY WHEN THERE IS A CROSSOVER
cross = TRUE
),
label = "thresholdexit"
)
test_init = applyIndicators(strategy.st, mktdata = OHLC(SPY))
test = applySignals(strategy = strategy.st, mktdata = test_init)
source('~/algo_trading/configuration.R', echo=TRUE)
source('~/algo_trading/indicators.R', echo=TRUE)
source('~/algo_trading/signals.R', echo=TRUE)
test["2015-01-01/2015-01-31"]
add.signal(strategy.st, name = "sigFormula",
arguments = list(formula = "longfilter & longthreshold",
cross = TRUE
),
label = TRUE
)
#IDEA IS YOU DON'T WANT TO KEEP ENTERING INTO A POSITON AS LONG AS CONDITIONS HOLD TRUE BUT YOU DO WANT TO HOLD A POSITION WHEN THERES A PULLACK IN AN UPTRENDING ENVIRONMENT
add.signal(strategy.st, name = "sigFormula",
arguments = list(formula = "longfilter & longthreshold",
cross = TRUE
),
label = "longentry"
)
source('~/algo_trading/configuration.R', echo=TRUE)
source('~/algo_trading/indicators.R', echo=TRUE)
source('~/algo_trading/signals.R', echo=TRUE)
test_init = applyIndicators(strategy.st, mktdata = OHLC(SPY))
test = applySignals(strategy = strategy.st, mktdata = test_init)
View(test)
View(test)
#SPECIFY HOW YOU WILL SHAPE YOUR TRANSACTION
add.rule(strategy.st, name = "ruleSignal",
arguments = list(
sigcol = "filterexit",
sigval = TRUE,
orderqty = "all",
ordertype = "market",
orderside = "long",
replace = FALSE,
prefer = "Open"),
type = "exit"
)
#SPECIFY HOW YOU WILL SHAPE YOUR TRANSACTION,#EXIT THE POSITION ONCE THE 50 DAY DROPS BELOW THE 200 DAY SMA
#THIS IS AN EXIT RULE
add.rule(strategy.st, name = "ruleSignal",
arguments = list(
#specifies the signal column in your strategy
sigcol = "filterexit",
#THE VALUE YOUR RULE SHOULD TAKE TO TRIGGER THE RULE
sigval = TRUE,
#REDUCES YOUR POSITION TO ZERO
orderqty = "all",
#CAN DO A LIMIT ORDER TOO
ordertype = "market",
#CAN GO LONG OR SHORT
orderside = "long",
#SPECIFIES WHETHER OR NOT TO IGNORE ALL OTHER SIGNALS ON THE SAME DATE THAT THE STRATEGY ACTS UPON ONE SIGNAL
replace = FALSE,
#CAN OVERRIDE THE NEXT BAR MECHANISM (SIGNAL TUESDAY PLACE ORDER WEDNSDAY)
#OPEN = BUY AT THE NEXT DAYS OPENING PRICE
prefer = "Open"),
type = "exit"
)
#1= ON
#0=OFF
#THIS IS AN ENTRY RULE WITH A SET ORDERQTY
add.rule(strategy.st, name = "ruleSignal",
arguments = list(
sigcol = "longentry",
sigval = TRUE,
orderqty = 1,
ordertype = "market",
orderside = "long",
replace = FALSE,
prefer = "Open"),
type = "enter"
)
source('~/algo_trading/configuration.R', echo=TRUE)
source('~/algo_trading/indicators.R', echo=TRUE)
source('~/algo_trading/signals.R', echo=TRUE)
source('~/algo_trading/rules.R', echo=TRUE)
out = applyStrategy(strategy = strategy.st, portfolio.st = portfolio.st)
out = applyStrategy(strategy = strategy.st, portfolios = portfolio.st)
daterange = time(getPortfolio(portfolio.st)$summary)[-1]
daterange
updateAcct(account.st, daterange)
updateEndEq(account.st)
tstats = tradeStats(Portfolios = portfolio.st)
updateEndEq(account.st)
tstats = tradeStats(Portfolios = portfolio.st)
daterange = time(getPortfolio(portfolio.st)$summary)[-1]
updateAcct(account.st, daterange)
updateEndEq(account.st)
#RUN THE STRATEGY
#APPLIES YOUR STRATEGY
out = applyStrategy(strategy = strategy.st, portfolios = portfolio.st)
#UPDATE YOUR PORTFOLIO
updatePortf(portfolio.st)
daterange = time(getPortfolio(portfolio.st)$summary)[-1]
#UPDATE YOUR ACCOUNT
updateAcct(account.st, daterange)
updateEndEq(account.st)
#THIS STRATEGY INCLUDES THE FOLLOWING SINGLA
#1.sigComparison for SMA50 being greater than SMA200
#2.sigThreshold with cross set to FALSE for DVO_2_126 LESS THAN 20
#3.sigFormula to tie them toegether and set cross to TRUE
#4.sigCrossover with SMA50 less than SMA200
#5.sigThreshold with cross set to TRUE for DVO_2_126
#CALCULATE THE PROFIT FACTOR
tstats = tradeStats(Portfolios = portfolio.st)
tstats
tstats$Profit.Factor
chart.Posn(Portfolio = portfolio.st, Symbol = "SPY")
sma50 = SMA(x = CL(SPY), n = 50)
sma200 = SMA(x = CL(SPY), n = 200)
dvo = DVO(HLC(SPY), navg = 2, percentlookback = 126)
getSymbols("SPY", from ="2015-01-01", to ="2016-12-25", src="yahoo", adjust=TRUE)
plot(Cl(SPY))
#add a moving average to your data
lines(SMA(Cl(SPY)), col="red")
sma50 = SMA(x = CL(SPY), n = 50)
#ADDING INDICATORS TO CHART.POSN
sma50 = SMA(x = Cl(SPY), n = 50)
sma200 = SMA(x = Cl(SPY), n = 200)
dvo = DVO(HLC(SPY), navg = 2, percentlookback = 126)
chart.Posn(Portfolio = portfolio.st)
add_TA(sma200, on = 1, col="red")
add_TA(sma50, on = 1, col="blue")
add_TA(dvo)
instrets = PortfReturns(portfolio.st)
SharpeRatio.annualized(instrets, geometric = FALSE)
chart.Posn(Portfolio = portfolio.st, Symbol = "SPY")
add_TA(sma50, on = 1, col="blue")
add_TA(sma200, on = 1, col="red")
add_TA(dvo)
#COMPUTE SHARPE_RATIO
#GET INSTRUMENT RETURNS
instrets = PortfReturns(portfolio.st)
SharpeRatio.annualized(instrets, geometric = FALSE)
source('~/algo_trading/configuration.R', echo=TRUE)
source('~/algo_trading/configuration.R', echo=TRUE)
source('~/algo_trading/indicators.R', echo=TRUE)
source('~/algo_trading/signals.R', echo=TRUE)
source('~/algo_trading/indicators.R', echo=TRUE)
source('~/algo_trading/signals.R', echo=TRUE)
source('~/algo_trading/rules.R', echo=TRUE)
source('~/algo_trading/analyzing_results.R', echo=TRUE)
source('~/algo_trading/configuration.R', echo=TRUE)
source('~/algo_trading/configuration.R', echo=TRUE)
source('~/algo_trading/indicators.R', echo=TRUE)
source('~/algo_trading/signals.R', echo=TRUE)
source('~/algo_trading/rules.R', echo=TRUE)
source('~/algo_trading/analyzing_results.R', echo=TRUE)
out = applyStrategy(strategy = strategy.st, portfolios = portfolio.st)
zoom_Chart("2007-08/2001-12")
zoom_Chart("2013-08/2013-12")
zoom_Chart("2013-08/2013-12")
source('~/algo_trading/configuration.R', echo=TRUE)
source('~/algo_trading/indicators.R', echo=TRUE)
CL(SPY)
Cl(SPY)
Cl(SPY)/Cl(SPY)
Cl(HLC)/((Hi(HLC) +Lo(HLC))/2)
ratio = Cl(SPY)/((Hi(SPY) +Lo(SPY))/2)
ratio
View(ratio)
avgratio = SMA(ratio, n = navg)
avgratio = SMA(ratio, n = 126)
avgratio
runPercentRank(avgratio, n = 2, exact.multiplier = 1)
runPercentRank(avgratio, n = 126, exact.multiplier = 1)
source('~/algo_trading/signals.R', echo=TRUE)
source('~/algo_trading/rules.R', echo=TRUE)
out = applyStrategy(strategy = strategy.st, portfolios = portfolio.st)
updatePortf(portfolio.st)
daterange = time(getPortfolio(portfolio.st)$summary)[-1]
updateAcct(account.st, daterange)
deterange
daterange
updateEndEq(account.st)
tstats = tradeStats(Portfolios = portfolio.st)
tstats$Profit.Factor
#HOW MANY DOLLARS YOU MAKE FOR EACH DOLLAR YOU LOSE. A PROFIT FACTOR ABOVE 1 MEANS YOUR STRATEGY IS PROFITABLE
#VIEW HOW THE STRATEGY PERFORMED
chart.Posn(Portfolio = portfolio.st, Symbol = "SPY")
#ADDING INDICATORS TO CHART.POSN
sma50 = SMA(x = Cl(SPY), n = 50)
sma200 = SMA(x = Cl(SPY), n = 200)
dvo = DVO(HLC(SPY), navg = 2, percentlookback = 126)
chart.Posn(Portfolio = portfolio.st, Symbol = "SPY")
add_TA(sma50, on = 1, col="blue")
add_TA(sma200, on = 1, col="red")
add_TA(dvo)
#COMPUTE SHARPE_RATIO
#GET INSTRUMENT RETURNS
instrets = PortfReturns(portfolio.st)
SharpeRatio.annualized(instrets, geometric = FALSE)
zoom_Chart("2013-08/2013-12")
#BLUE LINE = TOOK A POSITION. LINE LESS THEN ZERO IS A BET ON DECREASING PRICES
#GREEN LINE IS THE VALUE OF THE PORTFOLIO OVER TIME
#RED LINE IS THE DRAWDOWN CHARTE. DRAWDOWN = THE AMOUNT OF MONEY LOST SINCE A NEW HIGH
#GREEN TRIANGLES ARE BUY ORDERS AND RED TRIANGLES OR SELL ORDERS
#ADDING INDICATORS TO CHART.POSN
sma50 = SMA(x = Cl(SPY), n = 50)
sma200 = SMA(x = Cl(SPY), n = 200)
dvo = DVO(HLC(SPY), navg = 2, percentlookback = 126)
chart.Posn(Portfolio = portfolio.st, Symbol = "SPY")
add_TA(sma50, on = 1, col="blue")
add_TA(sma200, on = 1, col="red")
add_TA(dvo)
zoom_Chart("2013-08-01/2013-12-01")
sma50 = SMA(x = Cl(SPY), n = 50)
sma200 = SMA(x = Cl(SPY), n = 200)
dvo = DVO(HLC(SPY), navg = 2, percentlookback = 126)
chart.Posn(Portfolio = portfolio.st, Symbol = "SPY")
add_TA(sma50, on = 1, col="blue")
add_TA(sma200, on = 1, col="red")
add_TA(dvo)
source('~/.active-rstudio-document', echo=TRUE)
chart.Posn(Portfolio="p", Symbol="MMM")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/algo_trading/configuration.R', echo=TRUE)
source('~/algo_trading/indicators.R', echo=TRUE)
source('~/algo_trading/signals.R', echo=TRUE)
source('~/algo_trading/rules.R', echo=TRUE)
source('~/algo_trading/analyzing_results.R', echo=TRUE)
#ADDING INDICATORS TO CHART.POSN
sma50 = SMA(x = Cl(SPY), n = 50)
sma200 = SMA(x = Cl(SPY), n = 200)
dvo = DVO(HLC(SPY), navg = 2, percentlookback = 126)
chart.Posn(Portfolio = portfolio.st, Symbol = "SPY")
add_TA(sma50, on = 1, col="blue")
add_TA(sma200, on = 1, col="red")
add_TA(dvo)
getOrderBook(portfolio.st)
View(getOrderBook(portfolio.st))
mktdata
df = getOrderBook(portfolio.st)
df
data.frame(df)
?getOrderBook
View(getOrderBook(portfolio.st)
asdf
View(getOrderBook(portfolio.st))
tradeOrderStats(portfolio.st)
tradeStats(portfolio.st, symbol=SPY)
tradeStats(portfolio.st, Symbols = SPY)
tradeStats(portfolio.st, Symbols = "SPY")
tradeOrderStats(portfolio.st, Symbols = "SPY")
?tradeOrderStats
tradeOrderStats(portfolio.st, symbol = "SPY")
View(tradeOrderStats(portfolio.st, symbol = "SPY"))
?getOrderBook
getOrderBook(portfolio.st, envir = strategy.st)
getOrderBook(portfolio.st)
tradeStats(portfolio.st, Symbols = "SPY")
View(tradeOrderStats(portfolio.st, symbol = "SPY"))
https://r-forge.r-project.org/scm/viewvc.php/*checkout*/pkg/quantstrat/sandbox/QuantstratWorkshop.pdf?root=blotter
getOrderBook(portfolio.st)
str(getOrderBook(portfolio.st))
getOrderBook(portfolio.st)[1]
getOrderBook(portfolio.st)[2]
str(getOrderBook(portfolio.st)[1])
data.Frame(getOrderBook(portfolio.st)[1])
data.frame(getOrderBook(portfolio.st)[1])
View(data.frame(getOrderBook(portfolio.st)[1]))
x = data.frame(getOrderBook(portfolio.st)[1])
str(x)
x.row.names
row.names(x)
x["dates"] =  row.names(x)
x
mktdata
head(mktdata)
y = mktdata
y["dates"]= row.names(y)
row.names(y)
row.names(mktdata)
View(mktdata)
str(mktdata)
data.frame(mktdata)
row.names(data.frame(mktdata))
y = data.frame(mktdata)
y["dates"] = row.names(data.frame(mktdata))
y
merge(x=x, y=y, by.x = "Dates", by.y = "dates", x.all=TRUE)
merge(x=x, y=y, by.x = "Dates", by.y = "dates")
merge(x=x, y=y, by.x = "Dates", by.y = "Dates")
head(x)
merge(x=x, y=y, by.x = "dates", by.y = "dates")
merge(x=x, y=y, by.x = "dates", by.y = "dates", all.x = TRUE)
View(merge(x=x, y=y, by.x = "dates", by.y = "dates", all.x = TRUE))
x = data.frame(getOrderBook(portfolio.st)[1])
x["dates"] =  row.names(x)
y = data.frame(mktdata)
y["dates"] = row.names(data.frame(mktdata))
View(merge(x=x, y=y, by.x = "dates", by.y = "dates", all.x = TRUE))
findal_book = merge(x=x, y=y, by.x = "dates", by.y = "dates", all.x = TRUE)
